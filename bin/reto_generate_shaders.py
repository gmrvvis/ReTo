#!/usr/bin/python
# -*- coding: utf-8 -*-
'''
Copyright (c) 2014-2016 GMRV/URJC.

Authors: Cristian Rodr√≠guez Bernal

This file is part of ReTo <https://gitlab.gmrv.es/nsviz/ReTo>

This library is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License version 3.0 as published
by the Free Software Foundation.

This library is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
details.

You should have received a copy of the GNU Lesser General Public License
along with this library; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
'''

from optparse import OptionParser
import sys, getopt
import os, re, io
from string import Template
from imp import reload

tmpl = """#ifndef $header
#define $header

namespace $namespace
{
$tmpl
};

#endif /* $header */
"""

def first_lower(s):
  if len(s) == 0:
    return s
  else:
    return s[0].lower() + s[1:]

def rchop(str_, ending):
  if str_.endswith(ending):
    return str_[:-len(ending)]
  return str_

set_vars = set()

def recreateFile( path ):
  list = []
  for root, subdirectory, files in os.walk( path ):
    for file in files:
      list += read_file( root, file, path, False )
  del list[-1]
  set_vars.clear( )
  return list

def read_file( root, file, path, import_file ):
  list = []
  if not import_file and file[0] == "_":
    return []
  # Get parent directory name. "" if directory as path
  var_name = os.path.relpath( os.path.join( root, file ), path ).replace( "\\", "_" )
  # Remove ".glsl" and replace "." and " " to "_"
  var_name = rchop( var_name, ".glsl" ).replace( ".", "_" ).replace( " ", "_ ")
  content = []

  try:
    f = io.open( os.path.join(root, file ), mode="r", encoding='utf-8' )
    for line in f:
      v = re.match(r'#include\(\"(.+?)\"\)', line)
      if not v is None:
        content += read_file( root, v.group(1), path, True )
      else:
        content.append( line.rstrip( '\n' ) )
    f.close( )
  except IOError as e:
    print("'" + file + "' not found")
    return []

  content = '\\n"\n  "'.join( content )
  if not import_file:
    var_name = first_lower( var_name )
    if var_name in set_vars:
      #raise ValueError("Var_name exist")
      print( var_name + " repeated ..." )
      return []
    set_vars.add( var_name )
    list.append( "  const char* " + var_name + " = " )
    list.append( '"' + content + '";' )
    list.append( "\n\n" )
  else:
    list.append( content + "\\n" )
  return list

def parse_cli( ):
  parser = OptionParser( )
  parser.add_option("-d", "--declaration", dest="declaration",
                    help="Header declaration (without H)")
  parser.add_option("-n", "--namespace", dest="namespace",
                    help="header namespace")
  parser.add_option("-r", "--route",  dest="route", default=".",
                    help="sources directory")
  parser.add_option("-f", "--file",  dest="fileOutput", default="exit.h",
                    help="file output")

  ( options, args ) = parser.parse_args( )
  defaults = vars( parser.get_default_values( ) )
  optionsdict = vars( options )

  all_none = False
  for k, v in optionsdict.items( ):
    if v is None and defaults.get( k ) is None:
      print (k + " undefined")
      all_none = True


  if all_none:
    print( 'python reto_generate_shaders.py -r "route" -n "namespace"  '\
           '-d "RETO" -f "file.h"' )
    parser.print_help( )
    sys.exit( )
  return optionsdict

if __name__ == "__main__":
  if sys.version[0] == '2':
    reload(sys)
    sys.setdefaultencoding('utf8')

  opts = parse_cli( )
  src = Template( tmpl )

  list = recreateFile( opts["route"] )

  str_ = ''.join(str(x) for x in list)

  header = opts["declaration"] + "_H"

  d = {
    "tmpl": str_,
    "namespace": opts["namespace"],
    "header" : header.upper( )
  }
  code = src.substitute( d )



  if os.path.exists( opts["fileOutput"] ):
    try:
      os.remove( opts["fileOutput"] )
    except e:
      print ("Error: %s - %s." % ( e.filename, e.strerror) )

  file = io.open(opts["fileOutput"], mode="w",  encoding='utf-8')
  file.write( u"// File generated by reto_generate_shaders.py. Do not edit.\n" )
  file.write( u"{0}".format(code) )
  file.close( )
